const cloudstackAPI = require('./cloudstack-api');

async function diagnosticVPCConfiguration() {
  console.log('üîç Diagnostic de la configuration CloudStack pour les VPCs\n');

  try {
    // 1. V√©rifier les zones et leurs r√©seaux physiques
    console.log('üìã 1. V√©rification des zones et r√©seaux physiques');
    console.log('=' .repeat(60));
    
    const zones = await cloudstackAPI.getZones();
    console.log(`‚úÖ ${zones.length} zones trouv√©es`);
    
    for (const zone of zones) {
      console.log(`\nüîç Zone: ${zone.name} (${zone.id})`);
      
      try {
        // R√©cup√©rer les r√©seaux physiques de cette zone
        const physicalNetworks = await cloudstackAPI.makeRequest('listPhysicalNetworks', {
          zoneid: zone.id
        });
        
        const networks = physicalNetworks.listphysicalnetworksresponse?.physicalnetwork || [];
        console.log(`   üìä ${networks.length} r√©seaux physiques trouv√©s`);
        
        if (networks.length === 0) {
          console.log('   ‚ùå Aucun r√©seau physique configur√©');
          continue;
        }
        
        for (const network of networks) {
          console.log(`   üîß R√©seau physique: ${network.name} (${network.id})`);
          console.log(`      State: ${network.state}`);
          console.log(`      Broadcast Domain Range: ${network.broadcastdomainrange}`);
          
          // V√©rifier les providers de ce r√©seau
          if (network.providers) {
            console.log(`      Providers: ${network.providers}`);
          }
          
          // V√©rifier les services de ce r√©seau
          if (network.services) {
            console.log(`      Services: ${network.services}`);
          }
        }
        
        // V√©rifier les providers sp√©cifiquement
        console.log('\n   üîç V√©rification des providers...');
        const providers = await cloudstackAPI.makeRequest('listNetworkServiceProviders', {
          zoneid: zone.id
        });
        
        const serviceProviders = providers.listnetworkserviceprovidersresponse?.networkserviceprovider || [];
        console.log(`   üìä ${serviceProviders.length} providers de services trouv√©s`);
        
        for (const provider of serviceProviders) {
          console.log(`   üîß Provider: ${provider.name} (${provider.id})`);
          console.log(`      Service: ${provider.service}`);
          console.log(`      State: ${provider.state}`);
          
          // V√©rifier les capacit√©s du provider
          if (provider.capabilities) {
            console.log(`      Capacit√©s: ${provider.capabilities}`);
          }
        }
        
      } catch (error) {
        console.log(`   ‚ùå Erreur lors de la v√©rification de la zone: ${error.message}`);
      }
    }
    console.log();

    // 2. V√©rifier les VPC offerings et leurs capacit√©s
    console.log('üìã 2. V√©rification des VPC offerings');
    console.log('=' .repeat(60));
    
    const vpcOfferings = await cloudstackAPI.makeRequest('listVPCOfferings');
    const offerings = vpcOfferings.listvpcofferingsresponse?.vpcoffering || [];
    console.log(`‚úÖ ${offerings.length} VPC offerings disponibles`);
    
    for (const offering of offerings) {
      console.log(`\nüîß VPC Offering: ${offering.name} (${offering.id})`);
      console.log(`   State: ${offering.state}`);
      console.log(`   Display Text: ${offering.displaytext}`);
      
      // V√©rifier les services inclus
      if (offering.services) {
        console.log(`   Services: ${offering.services}`);
      }
      
      // V√©rifier les capacit√©s
      if (offering.capabilities) {
        console.log(`   Capacit√©s: ${offering.capabilities}`);
      }
    }
    console.log();

    // 3. V√©rifier les configurations syst√®me
    console.log('üìã 3. V√©rification des configurations syst√®me');
    console.log('=' .repeat(60));
    
    try {
      // V√©rifier les configurations globales
      const globalConfigs = await cloudstackAPI.makeRequest('listConfigurations', {
        name: 'vpc'
      });
      
      const configs = globalConfigs.listconfigurationsresponse?.configuration || [];
      console.log(`‚úÖ ${configs.length} configurations VPC trouv√©es`);
      
      for (const config of configs) {
        console.log(`   ${config.name}: ${config.value}`);
      }
    } catch (error) {
      console.log(`‚ùå Erreur lors de la v√©rification des configurations: ${error.message}`);
    }
    console.log();

    // 4. V√©rifier les capacit√©s de la zone
    console.log('üìã 4. V√©rification des capacit√©s de la zone');
    console.log('=' .repeat(60));
    
    for (const zone of zones) {
      console.log(`\nüîç Capacit√©s de la zone: ${zone.name}`);
      
      try {
        // V√©rifier les capacit√©s de la zone
        const capabilities = await cloudstackAPI.makeRequest('listCapabilities', {
          zoneid: zone.id
        });
        
        const zoneCapabilities = capabilities.listcapabilitiesresponse?.capability || [];
        console.log(`   üìä ${zoneCapabilities.length} capacit√©s trouv√©es`);
        
        for (const capability of zoneCapabilities) {
          console.log(`   üîß ${capability.name}: ${capability.value}`);
        }
        
      } catch (error) {
        console.log(`   ‚ùå Erreur lors de la v√©rification des capacit√©s: ${error.message}`);
      }
    }
    console.log();

    // 5. Analyse et recommandations
    console.log('üìã 5. Analyse et recommandations');
    console.log('=' .repeat(60));
    
    console.log('üîç PROBL√àME IDENTIFI√â:');
    console.log('   L\'erreur 431 indique que le provider VpcVirtualRouter n\'est pas activ√©');
    console.log('   dans les r√©seaux physiques de la zone.');
    console.log('');
    console.log('üí° SOLUTIONS:');
    console.log('');
    console.log('1. üîß Configuration CloudStack (Administrateur requis):');
    console.log('   a) Connectez-vous √† l\'interface d\'administration CloudStack');
    console.log('   b) Allez dans Infrastructure > Zones');
    console.log('   c) S√©lectionnez votre zone');
    console.log('   d) Allez dans l\'onglet "Physical Networks"');
    console.log('   e) S√©lectionnez le r√©seau physique principal');
    console.log('   f) Activez le provider "VpcVirtualRouter"');
    console.log('   g) Sauvegardez la configuration');
    console.log('');
    console.log('2. üîß Via l\'API CloudStack (si vous avez les droits admin):');
    console.log('   - Utilisez la commande "updatePhysicalNetwork"');
    console.log('   - Activez le service "VpcVirtualRouter"');
    console.log('');
    console.log('3. üîß V√©rification post-configuration:');
    console.log('   - Relancez ce diagnostic apr√®s la configuration');
    console.log('   - Testez la cr√©ation d\'un VPC');
    console.log('');
    console.log('4. üîß Alternative temporaire:');
    console.log('   - Utilisez des r√©seaux isol√©s au lieu de VPCs');
    console.log('   - Ou utilisez des VPCs dans une autre zone configur√©e');
    console.log('');
    console.log('‚ö†Ô∏è IMPORTANT:');
    console.log('   Cette configuration n√©cessite des droits d\'administrateur CloudStack');
    console.log('   et peut n√©cessiter un red√©marrage des services r√©seau.');

  } catch (error) {
    console.error('‚ùå Erreur lors du diagnostic:', error);
    console.error('Stack trace:', error.stack);
  }
}

// Fonction pour v√©rifier si la configuration est correcte
async function checkVPCReadiness() {
  console.log('üîç V√©rification de la pr√©paration VPC\n');
  
  try {
    // Test simple de cr√©ation de VPC
    const testVPCData = {
      name: `test-readiness-${Date.now()}`,
      displaytext: 'Test de pr√©paration VPC',
      cidr: '10.0.0.0/16',
      vpcofferingid: 'b1a77c5e-2fa8-4821-8fe9-7ab193489287',
      zoneid: '28e45a8a-e1a3-43c2-8174-8061f5ac83b6'
    };
    
    console.log('üß™ Test de cr√©ation de VPC...');
    const result = await cloudstackAPI.createVPC(testVPCData);
    console.log('‚úÖ Configuration VPC OK !');
    console.log('üìä VPC cr√©√©:', result);
    
    // Nettoyer
    if (result.id || result.vpc?.id) {
      console.log('üóëÔ∏è Suppression du VPC de test...');
      await cloudstackAPI.deleteVPC(result.id || result.vpc.id);
      console.log('‚úÖ VPC de test supprim√©');
    }
    
    return true;
  } catch (error) {
    console.log('‚ùå Configuration VPC non pr√™te');
    console.log('üí¨ Erreur:', error.message);
    return false;
  }
}

// Ex√©cuter le diagnostic
async function runDiagnostic() {
  await diagnosticVPCConfiguration();
  
  console.log('\nüîÑ V√©rification de la pr√©paration VPC...');
  const isReady = await checkVPCReadiness();
  
  if (isReady) {
    console.log('\nüéâ Configuration VPC pr√™te !');
    console.log('Vous pouvez maintenant cr√©er des VPCs dans votre portail.');
  } else {
    console.log('\n‚ö†Ô∏è Configuration VPC non pr√™te');
    console.log('Suivez les recommandations ci-dessus pour r√©soudre le probl√®me.');
  }
}

// V√©rifier si le script est ex√©cut√© directement
if (require.main === module) {
  runDiagnostic().catch(console.error);
}

module.exports = {
  diagnosticVPCConfiguration,
  checkVPCReadiness,
  runDiagnostic
};
