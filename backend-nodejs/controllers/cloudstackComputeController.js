const cloudstackAPI = require('../cloudstack-api');

// ===== GESTION DES INSTANCES VIA CLOUDSTACK =====

// R√©cup√©rer toutes les instances depuis CloudStack
const getAllInstances = async (req, res) => {
  try {
    console.log('üñ•Ô∏è R√©cup√©ration des instances depuis CloudStack...');
    
    const instances = await cloudstackAPI.getVirtualMachines();
    
    console.log(`‚úÖ ${instances.length} instances r√©cup√©r√©es`);
    res.json({
      success: true,
      count: instances.length,
      instances: instances
    });
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des instances:', error);
    res.status(500).json({ 
      success: false,
      error: 'Erreur lors de la r√©cup√©ration des instances CloudStack',
      details: error.message 
    });
  }
};

// R√©cup√©rer une instance par ID depuis CloudStack
const getInstanceById = async (req, res) => {
  try {
    const { id } = req.params;
    console.log(`üñ•Ô∏è R√©cup√©ration de l'instance ${id} depuis CloudStack...`);
    
    const instances = await cloudstackAPI.getVirtualMachines();
    const instance = instances.find(inst => inst.id === id);
    
    if (!instance) {
      return res.status(404).json({ 
        success: false,
        error: 'Instance non trouv√©e' 
      });
    }
    
    console.log(`‚úÖ Instance ${id} r√©cup√©r√©e`);
    res.json({
      success: true,
      instance: instance
    });
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration de l\'instance:', error);
    res.status(500).json({ 
      success: false,
      error: 'Erreur lors de la r√©cup√©ration de l\'instance CloudStack',
      details: error.message 
    });
  }
};

// D√©ployer une nouvelle instance via CloudStack
const createInstance = async (req, res) => {
  try {
    const { 
      name, 
      displayname, 
      serviceofferingid, 
      templateid, 
      zoneid, 
      networkids,
      account,
      domainid,
      startvm = true
    } = req.body;
    
    console.log('üöÄ D√©ploiement d\'une nouvelle instance...');
    console.log('Param√®tres:', { name, displayname, serviceofferingid, templateid, zoneid });
    
    // Validation des param√®tres requis
    if (!name || !serviceofferingid || !templateid || !zoneid) {
      return res.status(400).json({
        success: false,
        error: 'Param√®tres manquants: name, serviceofferingid, templateid et zoneid sont requis'
      });
    }
    
    const params = {
      name,
      displayname: displayname || name,
      serviceofferingid,
      templateid,
      zoneid,
      startvm
    };
    
    // Ajouter les param√®tres optionnels
    if (networkids) params.networkids = networkids;
    if (account) params.account = account;
    if (domainid) params.domainid = domainid;
    
    const response = await cloudstackAPI.deployVirtualMachine(params);
    
    console.log('‚úÖ Instance d√©ploy√©e avec succ√®s');
    res.status(201).json({
      success: true,
      message: 'Instance d√©ploy√©e avec succ√®s',
      instance: response
    });
  } catch (error) {
    console.error('‚ùå Erreur lors du d√©ploiement de l\'instance:', error);
    res.status(500).json({ 
      success: false,
      error: 'Erreur lors du d√©ploiement de l\'instance CloudStack',
      details: error.message 
    });
  }
};

// D√©marrer une instance via CloudStack
const startInstance = async (req, res) => {
  try {
    const { id } = req.params;
    console.log(`‚ñ∂Ô∏è D√©marrage de l'instance ${id}...`);
    
    const response = await cloudstackAPI.startVirtualMachine(id);
    
    console.log(`‚úÖ Instance ${id} d√©marr√©e`);
    res.json({
      success: true,
      message: 'Instance d√©marr√©e avec succ√®s',
      response: response
    });
  } catch (error) {
    console.error('‚ùå Erreur lors du d√©marrage de l\'instance:', error);
    res.status(500).json({ 
      success: false,
      error: 'Erreur lors du d√©marrage de l\'instance CloudStack',
      details: error.message 
    });
  }
};

// Arr√™ter une instance via CloudStack
const stopInstance = async (req, res) => {
  try {
    const { id } = req.params;
    const { forced = false } = req.query;
    console.log(`‚èπÔ∏è Arr√™t de l'instance ${id} (forced: ${forced})...`);
    
    const response = await cloudstackAPI.stopVirtualMachine(id);
    
    console.log(`‚úÖ Instance ${id} arr√™t√©e`);
    res.json({
      success: true,
      message: 'Instance arr√™t√©e avec succ√®s',
      response: response
    });
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'arr√™t de l\'instance:', error);
    res.status(500).json({ 
      success: false,
      error: 'Erreur lors de l\'arr√™t de l\'instance CloudStack',
      details: error.message 
    });
  }
};

// Red√©marrer une instance via CloudStack
const rebootInstance = async (req, res) => {
  try {
    const { id } = req.params;
    const { forced = false } = req.query;
    console.log(`üîÑ Red√©marrage de l'instance ${id} (forced: ${forced})...`);
    
    const response = await cloudstackAPI.rebootVirtualMachine(id);
    
    console.log(`‚úÖ Instance ${id} red√©marr√©e`);
    res.json({
      success: true,
      message: 'Instance red√©marr√©e avec succ√®s',
      response: response
    });
  } catch (error) {
    console.error('‚ùå Erreur lors du red√©marrage de l\'instance:', error);
    res.status(500).json({ 
      success: false,
      error: 'Erreur lors du red√©marrage de l\'instance CloudStack',
      details: error.message 
    });
  }
};

// Supprimer une instance via CloudStack
const deleteInstance = async (req, res) => {
  try {
    const { id } = req.params;
    const { expunge = false } = req.query;
    console.log(`üóëÔ∏è Suppression de l'instance ${id} (expunge: ${expunge})...`);
    
    const response = await cloudstackAPI.destroyVirtualMachine(id);
    
    console.log(`‚úÖ Instance ${id} supprim√©e`);
    res.json({
      success: true,
      message: 'Instance supprim√©e avec succ√®s',
      response: response
    });
  } catch (error) {
    console.error('‚ùå Erreur lors de la suppression de l\'instance:', error);
    res.status(500).json({ 
      success: false,
      error: 'Erreur lors de la suppression de l\'instance CloudStack',
      details: error.message 
    });
  }
};

// ===== GESTION DES TEMPLATES ET OFFRES =====

// R√©cup√©rer les templates disponibles
const getTemplates = async (req, res) => {
  try {
    console.log('üìã R√©cup√©ration des templates disponibles...');
    
    const templates = await cloudstackAPI.getTemplates();
    
    console.log(`‚úÖ ${templates.length} templates r√©cup√©r√©s`);
    res.json({
      success: true,
      count: templates.length,
      templates: templates
    });
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des templates:', error);
    res.status(500).json({ 
      success: false,
      error: 'Erreur lors de la r√©cup√©ration des templates CloudStack',
      details: error.message 
    });
  }
};

// R√©cup√©rer les offres de service
const getServiceOfferings = async (req, res) => {
  try {
    console.log('üíº R√©cup√©ration des offres de service...');
    
    const offerings = await cloudstackAPI.getServiceOfferings();
    
    console.log(`‚úÖ ${offerings.length} offres de service r√©cup√©r√©es`);
    res.json({
      success: true,
      count: offerings.length,
      offerings: offerings
    });
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des offres de service:', error);
    res.status(500).json({ 
      success: false,
      error: 'Erreur lors de la r√©cup√©ration des offres de service CloudStack',
      details: error.message 
    });
  }
};

// R√©cup√©rer les zones disponibles
const getZones = async (req, res) => {
  try {
    console.log('üìç R√©cup√©ration des zones disponibles...');
    
    const zones = await cloudstackAPI.getZones();
    
    console.log(`‚úÖ ${zones.length} zones r√©cup√©r√©es`);
    res.json({
      success: true,
      count: zones.length,
      zones: zones
    });
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des zones:', error);
    res.status(500).json({ 
      success: false,
      error: 'Erreur lors de la r√©cup√©ration des zones CloudStack',
      details: error.message 
    });
  }
};

// ===== STATISTIQUES DES INSTANCES =====

// R√©cup√©rer les statistiques des instances
const getInstanceStats = async (req, res) => {
  try {
    console.log('üìä R√©cup√©ration des statistiques des instances...');
    
    const instances = await cloudstackAPI.getVirtualMachines();
    
    // Calculer les statistiques
    const stats = {
      total: instances.length,
      running: instances.filter(inst => inst.state === 'Running').length,
      stopped: instances.filter(inst => inst.state === 'Stopped').length,
      starting: instances.filter(inst => inst.state === 'Starting').length,
      stopping: instances.filter(inst => inst.state === 'Stopping').length,
      error: instances.filter(inst => inst.state === 'Error').length,
      destroyed: instances.filter(inst => inst.state === 'Destroyed').length
    };
    
    console.log('‚úÖ Statistiques des instances calcul√©es');
    res.json({
      success: true,
      stats: stats,
      instances: instances
    });
  } catch (error) {
    console.error('‚ùå Erreur lors du calcul des statistiques:', error);
    res.status(500).json({ 
      success: false,
      error: 'Erreur lors du calcul des statistiques des instances',
      details: error.message 
    });
  }
};

module.exports = {
  // Gestion des instances
  getAllInstances,
  getInstanceById,
  createInstance,
  startInstance,
  stopInstance,
  rebootInstance,
  deleteInstance,
  
  // Templates et offres
  getTemplates,
  getServiceOfferings,
  getZones,
  
  // Statistiques
  getInstanceStats
};
