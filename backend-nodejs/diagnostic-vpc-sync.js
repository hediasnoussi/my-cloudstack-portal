const cloudstackAPI = require('./cloudstack-api');
const db = require('./db');

async function diagnosticVPCSync() {
  console.log('üîç Diagnostic de synchronisation VPC entre le portail et CloudStack\n');

  try {
    // 1. V√©rifier les VPCs dans CloudStack
    console.log('üìã 1. V√©rification des VPCs dans CloudStack');
    console.log('=' .repeat(60));
    const cloudstackVPCs = await cloudstackAPI.getVPCs();
    console.log(`‚úÖ CloudStack: ${cloudstackVPCs.length} VPCs trouv√©s`);
    
    if (cloudstackVPCs.length > 0) {
      console.log('VPCs CloudStack:');
      cloudstackVPCs.forEach((vpc, index) => {
        console.log(`   ${index + 1}. ID: ${vpc.id}, Name: ${vpc.name}, State: ${vpc.state}`);
      });
    } else {
      console.log('   Aucun VPC trouv√© dans CloudStack');
    }
    console.log();

    // 2. V√©rifier les VPCs dans la base de donn√©es locale
    console.log('üìã 2. V√©rification des VPCs dans la base de donn√©es locale');
    console.log('=' .repeat(60));
    try {
      const [dbVPCs] = await db.query(`
        SELECT v.*, a.name as account_name, d.name as domain_name, z.name as zone_name 
        FROM vpcs v 
        LEFT JOIN accounts a ON v.account_id = a.id 
        LEFT JOIN domains d ON v.domain_id = d.id 
        LEFT JOIN zones z ON v.zone_id = z.id
      `);
      console.log(`‚úÖ Base de donn√©es: ${dbVPCs.length} VPCs trouv√©s`);
      
      if (dbVPCs.length > 0) {
        console.log('VPCs Base de donn√©es:');
        dbVPCs.forEach((vpc, index) => {
          console.log(`   ${index + 1}. ID: ${vpc.id}, Name: ${vpc.name}, State: ${vpc.state}, Account: ${vpc.account_name}`);
        });
      } else {
        console.log('   Aucun VPC trouv√© dans la base de donn√©es locale');
      }
    } catch (dbError) {
      console.log('‚ùå Erreur base de donn√©es:', dbError.message);
      console.log('   La table vpcs n\'existe peut-√™tre pas ou la connexion DB √©choue');
    }
    console.log();

    // 3. V√©rifier les comptes et domaines
    console.log('üìã 3. V√©rification des comptes et domaines');
    console.log('=' .repeat(60));
    
    // Comptes CloudStack
    try {
      const cloudstackAccounts = await cloudstackAPI.getAccounts();
      console.log(`‚úÖ CloudStack: ${cloudstackAccounts.length} comptes trouv√©s`);
      if (cloudstackAccounts.length > 0) {
        console.log('Comptes CloudStack:');
        cloudstackAccounts.slice(0, 5).forEach((account, index) => {
          console.log(`   ${index + 1}. Name: ${account.name}, Type: ${account.type}, State: ${account.state}`);
        });
        if (cloudstackAccounts.length > 5) {
          console.log(`   ... et ${cloudstackAccounts.length - 5} autres`);
        }
      }
    } catch (error) {
      console.log('‚ùå Erreur r√©cup√©ration comptes CloudStack:', error.message);
    }
    console.log();

    // Domaines CloudStack
    try {
      const cloudstackDomains = await cloudstackAPI.getDomains();
      console.log(`‚úÖ CloudStack: ${cloudstackDomains.length} domaines trouv√©s`);
      if (cloudstackDomains.length > 0) {
        console.log('Domaines CloudStack:');
        cloudstackDomains.slice(0, 5).forEach((domain, index) => {
          console.log(`   ${index + 1}. ID: ${domain.id}, Name: ${domain.name}, Path: ${domain.path}`);
        });
        if (cloudstackDomains.length > 5) {
          console.log(`   ... et ${cloudstackDomains.length - 5} autres`);
        }
      }
    } catch (error) {
      console.log('‚ùå Erreur r√©cup√©ration domaines CloudStack:', error.message);
    }
    console.log();

    // 4. V√©rifier les permissions de l'utilisateur CloudStack
    console.log('üìã 4. V√©rification des permissions utilisateur CloudStack');
    console.log('=' .repeat(60));
    
    try {
      // Tenter de cr√©er un VPC de test pour v√©rifier les permissions
      const testVPCData = {
        name: `test-vpc-diagnostic-${Date.now()}`,
        displaytext: 'VPC de test pour diagnostic',
        cidr: '10.0.0.0/16',
        vpcofferingid: cloudstackVPCs.length > 0 ? cloudstackVPCs[0].vpcofferingid : 'test-offering',
        zoneid: '28e45a8a-e1a3-43c2-8174-8061f5ac83b6'
      };
      
      console.log('üîß Test de cr√©ation de VPC...');
      const createResult = await cloudstackAPI.createVPC(testVPCData);
      console.log('‚úÖ Permissions OK - VPC de test cr√©√© avec succ√®s');
      console.log('   VPC cr√©√©:', createResult);
      
      // Supprimer le VPC de test
      console.log('üóëÔ∏è Suppression du VPC de test...');
      await cloudstackAPI.deleteVPC(createResult.id || createResult.vpc.id);
      console.log('‚úÖ VPC de test supprim√©');
      
    } catch (error) {
      console.log('‚ùå Erreur permissions:', error.message);
      if (error.message.includes('401')) {
        console.log('   üîê Probl√®me d\'authentification - V√©rifiez les cl√©s API');
      } else if (error.message.includes('533')) {
        console.log('   üö´ Probl√®me de permissions - L\'utilisateur n\'a pas les droits');
      } else if (error.message.includes('432')) {
        console.log('   üìã Probl√®me de param√®tres - V√©rifiez les offerings et zones');
      }
    }
    console.log();

    // 5. V√©rifier la configuration CloudStack
    console.log('üìã 5. V√©rification de la configuration CloudStack');
    console.log('=' .repeat(60));
    
    console.log('üîß Configuration actuelle:');
    console.log(`   API URL: ${process.env.CLOUDSTACK_API_URL || 'Non configur√©'}`);
    console.log(`   API Key: ${process.env.CLOUDSTACK_API_KEY ? 'Configur√©' : 'Non configur√©'}`);
    console.log(`   Secret Key: ${process.env.CLOUDSTACK_SECRET_KEY ? 'Configur√©' : 'Non configur√©'}`);
    console.log(`   Timeout: ${process.env.CLOUDSTACK_TIMEOUT || '30000'}ms`);
    console.log();

    // 6. V√©rifier les VPC offerings disponibles
    console.log('üìã 6. V√©rification des VPC offerings disponibles');
    console.log('=' .repeat(60));
    
    try {
      const vpcOfferings = await cloudstackAPI.makeRequest('listVPCOfferings');
      const offerings = vpcOfferings.listvpcofferingsresponse?.vpcoffering || [];
      console.log(`‚úÖ ${offerings.length} VPC offerings disponibles`);
      
      if (offerings.length > 0) {
        console.log('VPC Offerings:');
        offerings.forEach((offering, index) => {
          console.log(`   ${index + 1}. ID: ${offering.id}, Name: ${offering.name}, State: ${offering.state}`);
        });
      }
    } catch (error) {
      console.log('‚ùå Erreur r√©cup√©ration VPC offerings:', error.message);
    }
    console.log();

    // 7. Analyse et recommandations
    console.log('üìã 7. Analyse et recommandations');
    console.log('=' .repeat(60));
    
    let dbVPCs = [];
    try {
      const [dbResult] = await db.query(`
        SELECT v.*, a.name as account_name, d.name as domain_name, z.name as zone_name 
        FROM vpcs v 
        LEFT JOIN accounts a ON v.account_id = a.id 
        LEFT JOIN domains d ON v.domain_id = d.id 
        LEFT JOIN zones z ON v.zone_id = z.id
      `);
      dbVPCs = dbResult;
    } catch (dbError) {
      console.log('   Base de donn√©es non accessible:', dbError.message);
    }
    
    if (cloudstackVPCs.length === 0 && dbVPCs && dbVPCs.length > 0) {
      console.log('üîç PROBL√àME IDENTIFI√â:');
      console.log('   Les VPCs existent dans la base de donn√©es locale mais pas dans CloudStack');
      console.log('   Cela indique un probl√®me de synchronisation.');
      console.log('');
      console.log('üí° SOLUTIONS POSSIBLES:');
      console.log('   1. V√©rifiez que les VPCs ont √©t√© cr√©√©s avec les bons param√®tres CloudStack');
      console.log('   2. V√©rifiez les permissions de l\'utilisateur CloudStack');
      console.log('   3. V√©rifiez que les VPC offerings et zones sont corrects');
      console.log('   4. Synchronisez manuellement les VPCs du portail vers CloudStack');
    } else if (cloudstackVPCs.length === 0 && (!dbVPCs || dbVPCs.length === 0)) {
      console.log('‚úÖ SITUATION NORMALE:');
      console.log('   Aucun VPC n\'existe ni dans CloudStack ni dans la base de donn√©es locale');
      console.log('   Vous pouvez cr√©er de nouveaux VPCs.');
    } else if (cloudstackVPCs.length > 0) {
      console.log('‚úÖ VPCs TROUV√âS:');
      console.log('   Les VPCs existent dans CloudStack et sont accessibles.');
    }
    
    console.log('');
    console.log('üõ†Ô∏è PROCHAINES √âTAPES:');
    console.log('   1. V√©rifiez les logs du portail pour les erreurs de cr√©ation');
    console.log('   2. Testez la cr√©ation d\'un VPC directement via l\'API CloudStack');
    console.log('   3. V√©rifiez la configuration des VPC offerings dans CloudStack');
    console.log('   4. Synchronisez les donn√©es si n√©cessaire');

  } catch (error) {
    console.error('‚ùå Erreur lors du diagnostic:', error);
    console.error('Stack trace:', error.stack);
  }
}

// Fonction pour synchroniser les VPCs du portail vers CloudStack
async function syncVPCsToCloudStack() {
  console.log('\nüîÑ Synchronisation des VPCs du portail vers CloudStack\n');
  
  try {
    // R√©cup√©rer les VPCs de la base de donn√©es
    const [dbVPCs] = await db.query(`
      SELECT v.*, a.name as account_name, d.name as domain_name, z.name as zone_name 
      FROM vpcs v 
      LEFT JOIN accounts a ON v.account_id = a.id 
      LEFT JOIN domains d ON v.domain_id = d.id 
      LEFT JOIN zones z ON v.zone_id = z.id
      WHERE v.cloudstack_id IS NULL OR v.cloudstack_id = ''
    `);
    
    if (dbVPCs.length === 0) {
      console.log('‚úÖ Aucun VPC √† synchroniser');
      return;
    }
    
    console.log(`üìã ${dbVPCs.length} VPCs √† synchroniser vers CloudStack`);
    
    for (const vpc of dbVPCs) {
      try {
        console.log(`\nüîÑ Synchronisation du VPC: ${vpc.name}`);
        
        // R√©cup√©rer les VPC offerings disponibles
        const vpcOfferings = await cloudstackAPI.makeRequest('listVPCOfferings');
        const offerings = vpcOfferings.listvpcofferingsresponse?.vpcoffering || [];
        
        if (offerings.length === 0) {
          console.log(`   ‚ùå Aucun VPC offering disponible`);
          continue;
        }
        
        // Utiliser le premier VPC offering disponible
        const vpcOffering = offerings[0];
        
        // Cr√©er le VPC dans CloudStack
        const vpcData = {
          name: vpc.name,
          displaytext: vpc.description || vpc.name,
          cidr: vpc.cidr || '10.0.0.0/16',
          vpcofferingid: vpcOffering.id,
          zoneid: '28e45a8a-e1a3-43c2-8174-8061f5ac83b6' // Zone par d√©faut
        };
        
        console.log(`   üìã Cr√©ation avec les param√®tres:`, vpcData);
        
        const result = await cloudstackAPI.createVPC(vpcData);
        const cloudstackId = result.id || result.vpc?.id;
        
        if (cloudstackId) {
          // Mettre √† jour la base de donn√©es avec l'ID CloudStack
          await db.query(
            'UPDATE vpcs SET cloudstack_id = ?, state = ? WHERE id = ?',
            [cloudstackId, 'Created', vpc.id]
          );
          
          console.log(`   ‚úÖ VPC cr√©√© dans CloudStack avec l'ID: ${cloudstackId}`);
        } else {
          console.log(`   ‚ùå Erreur lors de la cr√©ation du VPC`);
        }
        
      } catch (error) {
        console.log(`   ‚ùå Erreur lors de la synchronisation: ${error.message}`);
      }
    }
    
    console.log('\n‚úÖ Synchronisation termin√©e');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la synchronisation:', error);
  }
}

// Ex√©cuter le diagnostic
async function runDiagnostic() {
  await diagnosticVPCSync();
  
  // Demander si l'utilisateur veut synchroniser
  console.log('\nüîÑ Voulez-vous synchroniser les VPCs du portail vers CloudStack ?');
  console.log('   (Cette fonctionnalit√© sera impl√©ment√©e dans une version future)');
}

// V√©rifier si le script est ex√©cut√© directement
if (require.main === module) {
  runDiagnostic().catch(console.error);
}

module.exports = {
  diagnosticVPCSync,
  syncVPCsToCloudStack,
  runDiagnostic
};
