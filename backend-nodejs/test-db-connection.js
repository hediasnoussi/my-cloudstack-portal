const mysql = require('mysql2/promise');
const config = require('./config');

async function testConnection() {
  try {
    console.log('üîç Test de connexion √† la base de donn√©es...');
    console.log('Configuration:', config.database);
    
    const connection = await mysql.createConnection(config.database);
    console.log('‚úÖ Connexion r√©ussie');
    
    // V√©rifier les tables
    const [tables] = await connection.execute('SHOW TABLES');
    console.log('üìã Tables disponibles:', tables.map(t => Object.values(t)[0]));
    
    // V√©rifier la table domains
    try {
      const [domains] = await connection.execute('SELECT * FROM domains LIMIT 5');
      console.log('‚úÖ Table domains:', domains.length, 'enregistrements');
    } catch (error) {
      console.log('‚ùå Erreur table domains:', error.message);
    }
    
    // V√©rifier la table roles
    try {
      const [roles] = await connection.execute('SELECT * FROM roles LIMIT 5');
      console.log('‚úÖ Table roles:', roles.length, 'enregistrements');
    } catch (error) {
      console.log('‚ùå Erreur table roles:', error.message);
    }
    
    // V√©rifier la table accounts
    try {
      const [accounts] = await connection.execute('SELECT * FROM accounts LIMIT 5');
      console.log('‚úÖ Table accounts:', accounts.length, 'enregistrements');
    } catch (error) {
      console.log('‚ùå Erreur table accounts:', error.message);
    }
    
    // V√©rifier la table zones
    try {
      const [zones] = await connection.execute('SELECT * FROM zones LIMIT 5');
      console.log('‚úÖ Table zones:', zones.length, 'enregistrements');
    } catch (error) {
      console.log('‚ùå Erreur table zones:', error.message);
    }
    
    await connection.end();
    console.log('‚úÖ Test termin√©');
    
  } catch (error) {
    console.error('‚ùå Erreur de connexion:', error.message);
  }
}

testConnection(); 