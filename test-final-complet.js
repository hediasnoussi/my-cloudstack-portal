import axios from 'axios';

async function testFinalComplet() {
  console.log('üéØ TEST FINAL COMPLET - Donn√©es CloudStack\n');
  console.log('=' .repeat(60));
  
  try {
    // Test 1: Connexion backend
    console.log('\n1Ô∏è‚É£ TEST BACKEND');
    const backendTest = await axios.get('http://localhost:3001/test');
    console.log('‚úÖ Backend fonctionnel:', backendTest.data.message);
    
    // Test 2: Statistiques CloudStack
    console.log('\n2Ô∏è‚É£ STATISTIQUES CLOUDSTACK');
    const stats = await axios.get('http://localhost:3001/api/global/cloudstack/stats');
    console.log('üìä Statistiques r√©cup√©r√©es:');
    console.log(`   ‚Ä¢ Domaines: ${stats.data.domains}`);
    console.log(`   ‚Ä¢ Comptes: ${stats.data.accounts}`);
    console.log(`   ‚Ä¢ Projets: ${stats.data.projects}`);
    console.log(`   ‚Ä¢ Instances: ${stats.data.instances}`);
    console.log(`   ‚Ä¢ Volumes: ${stats.data.volumes}`);
    console.log(`   ‚Ä¢ R√©seaux: ${stats.data.networks}`);
    console.log(`   ‚Ä¢ Groupes de s√©curit√©: ${stats.data.securityGroups}`);
    
    // Test 3: Instances d√©taill√©es
    console.log('\n3Ô∏è‚É£ INSTANCES CLOUDSTACK');
    const instances = await axios.get('http://localhost:3001/api/global/cloudstack/virtual-machines');
    console.log(`‚úÖ ${instances.data.length} instance(s) r√©cup√©r√©e(s)`);
    
    instances.data.forEach((instance, index) => {
      console.log(`\n   Instance ${index + 1}:`);
      console.log(`   ‚Ä¢ Nom: ${instance.name || instance.displayname}`);
      console.log(`   ‚Ä¢ √âtat: ${instance.state}`);
      console.log(`   ‚Ä¢ CPU: ${instance.cpunumber} vCPU`);
      console.log(`   ‚Ä¢ RAM: ${instance.memory} MB`);
      console.log(`   ‚Ä¢ Template: ${instance.templatename}`);
      console.log(`   ‚Ä¢ Zone: ${instance.zonename}`);
      console.log(`   ‚Ä¢ Cr√©√© le: ${new Date(instance.created).toLocaleDateString('fr-FR')}`);
    });
    
    // Test 4: Domaines
    console.log('\n4Ô∏è‚É£ DOMAINES CLOUDSTACK');
    const domains = await axios.get('http://localhost:3001/api/global/cloudstack/domains');
    console.log(`‚úÖ ${domains.data.length} domaine(s) r√©cup√©r√©(s)`);
    
    domains.data.forEach((domain, index) => {
      console.log(`\n   Domaine ${index + 1}:`);
      console.log(`   ‚Ä¢ Nom: ${domain.name}`);
      console.log(`   ‚Ä¢ ID: ${domain.id}`);
      console.log(`   ‚Ä¢ Chemin: ${domain.path}`);
      console.log(`   ‚Ä¢ √âtat: ${domain.state}`);
    });
    
    // Test 5: Comptes
    console.log('\n5Ô∏è‚É£ COMPTES CLOUDSTACK');
    const accounts = await axios.get('http://localhost:3001/api/global/cloudstack/accounts');
    console.log(`‚úÖ ${accounts.data.length} compte(s) r√©cup√©r√©(s)`);
    
    accounts.data.forEach((account, index) => {
      console.log(`\n   Compte ${index + 1}:`);
      console.log(`   ‚Ä¢ Nom: ${account.name}`);
      console.log(`   ‚Ä¢ Type: ${account.accounttype === 1 ? 'Admin' : 'User'}`);
      console.log(`   ‚Ä¢ √âtat: ${account.state}`);
      console.log(`   ‚Ä¢ Domaine: ${account.domain}`);
    });
    
    // Test 6: Actions sur les instances
    console.log('\n6Ô∏è‚É£ TEST DES ACTIONS');
    if (instances.data.length > 0) {
      const firstInstance = instances.data[0];
      console.log(`   Test sur l'instance: ${firstInstance.name}`);
      
      // Test de red√©marrage
      try {
        const rebootResponse = await axios.post(
          `http://localhost:3001/api/global/cloudstack/virtual-machines/${firstInstance.id}/reboot`
        );
        console.log(`   ‚úÖ Red√©marrage initi√© (Job ID: ${rebootResponse.data.jobid})`);
      } catch (error) {
        console.log(`   ‚ö†Ô∏è Red√©marrage √©chou√©: ${error.response?.data?.error || error.message}`);
      }
    }
    
    // Test 7: Frontend
    console.log('\n7Ô∏è‚É£ TEST FRONTEND');
    const frontendTest = await axios.get('http://localhost:5173');
    console.log('‚úÖ Frontend accessible (code:', frontendTest.status, ')');
    
    // R√©sum√© final
    console.log('\n' + '=' .repeat(60));
    console.log('üéâ R√âSUM√â FINAL');
    console.log('=' .repeat(60));
    console.log('‚úÖ Backend CloudStack: FONCTIONNEL');
    console.log('‚úÖ API CloudStack: FONCTIONNELLE');
    console.log('‚úÖ Donn√©es CloudStack: R√âCUP√âR√âES');
    console.log('‚úÖ Actions CloudStack: FONCTIONNELLES');
    console.log('‚úÖ Frontend: ACCESSIBLE');
    console.log('\nüì± PROCHAINES √âTAPES:');
    console.log('   1. Ouvrir http://localhost:5173/cloudstack-test');
    console.log('   2. V√©rifier l\'affichage des donn√©es CloudStack');
    console.log('   3. Tester les actions dans l\'interface');
    console.log('   4. V√©rifier que les dashboards utilisent les vraies donn√©es');
    
  } catch (error) {
    console.error('\n‚ùå ERREUR LORS DU TEST:', error.message);
    
    if (error.code === 'ECONNREFUSED') {
      console.log('\nüí° DIAGNOSTIC:');
      console.log('   ‚Ä¢ V√©rifiez que le backend tourne: cd backend-nodejs && npm start');
      console.log('   ‚Ä¢ V√©rifiez que le frontend tourne: npm run dev');
      console.log('   ‚Ä¢ V√©rifiez les ports 3001 et 5173');
    }
  }
}

testFinalComplet();
