import axios from 'axios';

const API_BASE_URL = 'http://localhost:3001/api/global';

async function diagnosticCloudStack() {
  console.log('üîç Diagnostic complet de CloudStack\n');
  console.log('=' .repeat(60));

  try {
    // 1. Statistiques g√©n√©rales
    console.log('\nüìä 1. STATISTIQUES G√âN√âRALES');
    console.log('-'.repeat(40));
    
    const statsRes = await axios.get(`${API_BASE_URL}/cloudstack/stats`);
    const stats = statsRes.data;
    
    console.log('üìà Statistiques CloudStack:');
    console.log(`   ‚Ä¢ Domaines: ${stats.domains}`);
    console.log(`   ‚Ä¢ Comptes: ${stats.accounts}`);
    console.log(`   ‚Ä¢ Projets: ${stats.projects}`);
    console.log(`   ‚Ä¢ Instances: ${stats.instances}`);
    console.log(`   ‚Ä¢ Volumes: ${stats.volumes}`);
    console.log(`   ‚Ä¢ R√©seaux: ${stats.networks}`);
    console.log(`   ‚Ä¢ Groupes de s√©curit√©: ${stats.securityGroups}`);

    // 2. Templates disponibles
    console.log('\nüì¶ 2. TEMPLATES DISPONIBLES');
    console.log('-'.repeat(40));
    
    const templatesRes = await axios.get(`${API_BASE_URL}/cloudstack/templates`);
    const templates = templatesRes.data;
    
    if (templates.length === 0) {
      console.log('‚ùå Aucun template disponible');
      console.log('üí° Solution: Cr√©er des templates dans CloudStack');
    } else {
      console.log(`‚úÖ ${templates.length} templates trouv√©s:`);
      templates.forEach((template, index) => {
        console.log(`   ${index + 1}. ${template.name} (${template.displaytext})`);
        console.log(`      ID: ${template.id} | Format: ${template.format} | Hypervisor: ${template.hypervisor}`);
        console.log(`      Public: ${template.ispublic} | Featured: ${template.isfeatured}`);
      });
    }

    // 3. Offres de service
    console.log('\n‚öôÔ∏è 3. OFFRES DE SERVICE');
    console.log('-'.repeat(40));
    
    const offeringsRes = await axios.get(`${API_BASE_URL}/cloudstack/service-offerings`);
    const offerings = offeringsRes.data;
    
    if (offerings.length === 0) {
      console.log('‚ùå Aucune offre de service disponible');
      console.log('üí° Solution: Configurer des Service Offerings dans CloudStack');
    } else {
      console.log(`‚úÖ ${offerings.length} offres de service trouv√©es:`);
      offerings.forEach((offering, index) => {
        console.log(`   ${index + 1}. ${offering.name} (${offering.displaytext})`);
        console.log(`      ID: ${offering.id} | CPU: ${offering.cpunumber} | RAM: ${offering.memory}MB`);
        console.log(`      Type: ${offering.iscustomized ? 'Personnalis√©' : 'Standard'}`);
      });
    }

    // 4. Zones disponibles
    console.log('\nüåç 4. ZONES DISPONIBLES');
    console.log('-'.repeat(40));
    
    const zonesRes = await axios.get(`${API_BASE_URL}/cloudstack/zones`);
    const zones = zonesRes.data;
    
    if (zones.length === 0) {
      console.log('‚ùå Aucune zone disponible');
      console.log('üí° Solution: Activer des zones dans CloudStack');
    } else {
      console.log(`‚úÖ ${zones.length} zones trouv√©es:`);
      zones.forEach((zone, index) => {
        console.log(`   ${index + 1}. ${zone.name} (${zone.displaytext})`);
        console.log(`      ID: ${zone.id} | Statut: ${zone.state} | Type: ${zone.networktype}`);
      });
    }

    // 5. Instances existantes
    console.log('\nüñ•Ô∏è 5. INSTANCES EXISTANTES');
    console.log('-'.repeat(40));
    
    const instancesRes = await axios.get(`${API_BASE_URL}/cloudstack/virtual-machines`);
    const instances = instancesRes.data;
    
    if (instances.length === 0) {
      console.log('‚ÑπÔ∏è Aucune instance existante');
    } else {
      console.log(`üìã ${instances.length} instances trouv√©es:`);
      instances.forEach((instance, index) => {
        console.log(`   ${index + 1}. ${instance.name} (${instance.displayname})`);
        console.log(`      ID: ${instance.id} | Statut: ${instance.state} | Compte: ${instance.account}`);
        console.log(`      Template: ${instance.templatename} | Zone: ${instance.zonename}`);
      });
    }

    // 6. R√©seaux disponibles
    console.log('\nüåê 6. R√âSEAUX DISPONIBLES');
    console.log('-'.repeat(40));
    
    const networksRes = await axios.get(`${API_BASE_URL}/cloudstack/networks`);
    const networks = networksRes.data;
    
    if (networks.length === 0) {
      console.log('‚ÑπÔ∏è Aucun r√©seau configur√©');
    } else {
      console.log(`‚úÖ ${networks.length} r√©seaux trouv√©s:`);
      networks.forEach((network, index) => {
        console.log(`   ${index + 1}. ${network.name} (${network.displaytext})`);
        console.log(`      ID: ${network.id} | Type: ${network.type} | Zone: ${network.zonename}`);
      });
    }

    // 7. R√©sum√© et recommandations
    console.log('\nüìã 7. R√âSUM√â ET RECOMMANDATIONS');
    console.log('-'.repeat(40));
    
    const canCreateVPS = templates.length > 0 && offerings.length > 0 && zones.length > 0;
    
    if (canCreateVPS) {
      console.log('‚úÖ Votre CloudStack est pr√™t pour cr√©er des VPS !');
      console.log('üéØ Vous pouvez maintenant cr√©er des VPS via le portail');
    } else {
      console.log('‚ùå Votre CloudStack n\'est pas encore configur√© pour cr√©er des VPS');
      console.log('\nüîß Actions n√©cessaires:');
      
      if (templates.length === 0) {
        console.log('   ‚Ä¢ Cr√©er au moins un template dans CloudStack');
        console.log('   ‚Ä¢ Ou t√©l√©charger un template depuis le marketplace');
      }
      
      if (offerings.length === 0) {
        console.log('   ‚Ä¢ Configurer des Service Offerings dans CloudStack');
        console.log('   ‚Ä¢ D√©finir des configurations CPU/RAM');
      }
      
      if (zones.length === 0) {
        console.log('   ‚Ä¢ Activer au moins une zone dans CloudStack');
        console.log('   ‚Ä¢ Configurer les ressources de la zone');
      }
    }

    console.log('\nüéâ Diagnostic termin√© !');
    console.log('=' .repeat(60));

  } catch (error) {
    console.error('‚ùå Erreur lors du diagnostic:', error.response?.data || error.message);
    console.log('\nüí° V√©rifiez que:');
    console.log('   ‚Ä¢ Le backend Node.js est d√©marr√© (port 3001)');
    console.log('   ‚Ä¢ CloudStack est accessible');
    console.log('   ‚Ä¢ Les variables d\'environnement sont configur√©es');
  }
}

// Lancer le diagnostic
diagnosticCloudStack();
